//day1 Adders
1.Half_Adder
Half_adder(sum,carry,a,b);
input a,b;
output reg sum,carry;
always @(a or b)
begin
sum = a^b;
carry = a&b;
end
endmodule

//Testbench
module half_adder_tb;
reg A,B;
wire SUM,CARRY;
Half_adder dut (.a(A),.b(B),.sum(SUM),.carry(CARRY));
initial begin
A=1'b0;B=1'b0;
#10
A=1'b1;B=1'b0;
#10
A=1'b0;B=1'b1;
#10
A=1'b1;B=1'b1;
#10
$finish;
end
endmodule




2. Full_Adder
full_adder(s,cout,a,b,cin);
input a,b,cin;
output reg s,cout;
always @(a or b or cin)
begin
s = a^b^cin;
cout = a&b|(cin&(a^b));
end
endmodule

//Testbench
module full_adder_tb;
reg A,B,C;
wire SUM,CARRY;
full_adder (.a(A),.b(B),.cin(C),.s(SUM),.cout(CARRY));
initial begin
A=1'b0;B=1'b0;C=1'b0;
#10
A=1'b0;B=1'b0;C=1'b1;
#10
A=1'b0;B=1'b1;C=1'b0;
#10
A=1'b0;B=1'b1;C=1'b1;
#10
A=1'b1;B=1'b0;C=1'b0;
#10
A=1'b1;B=1'b0;C=1'b1;
#10
A=1'b1;B=1'b1;C=1'b0;
#10
A=1'b1;B=1'b1;C=1'b1;
#10
$finish;
end
endmodule
